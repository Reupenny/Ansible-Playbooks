# core_server_health_check.yml
---
- name: Perform Core Server and CloudPanel Health Check
  hosts: vultr_servers
  become: true

  vars:
    log_check_lines: 100 # Number of lines to check from logs

  tasks:
    - name: Ensure hosts are being targeted
      ansible.builtin.debug:
        msg: "Running on {{ inventory_hostname }}"

    - name: --- SYSTEM HEALTH CHECKS ---
      ansible.builtin.debug:
        msg: "Starting system health checks..."

    - name: Check disk space usage
      ansible.builtin.command: df -h /
      register: df_output
      changed_when: false

    - name: Display disk space
      ansible.builtin.debug:
        msg: "Disk Usage:\n{{ df_output.stdout }}"

    - name: Check memory usage
      ansible.builtin.command: free -h
      register: free_output
      changed_when: false

    - name: Display memory usage
      ansible.builtin.debug:
        msg: "Memory Usage:\n{{ free_output.stdout }}"

    - name: Check system uptime and load average
      ansible.builtin.command: uptime
      register: uptime_output
      changed_when: false

    - name: Display uptime and load average
      ansible.builtin.debug:
        msg: "Uptime and Load Average:\n{{ uptime_output.stdout }}"

    - name: --- SERVICE CHECKS ---
      ansible.builtin.debug:
        msg: "Gathering service status..."

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: --- NGINX CHECKS ---
      ansible.builtin.debug:
        msg: "Starting Nginx checks..."

    - name: Display Nginx service status
      ansible.builtin.debug:
        msg: >-
          Nginx service status: {{
            'running' if (ansible_facts.services['nginx'] is defined and ansible_facts.services['nginx'].state == 'running')
            else 'NOT RUNNING'
          }}
      failed_when: ansible_facts.services['nginx'].state != 'running'
      ignore_errors: yes

    - name: Check Nginx configuration syntax
      ansible.builtin.command: nginx -t
      register: nginx_config_test
      changed_when: false
      failed_when: "'test failed' in nginx_config_test.stderr"
      ignore_errors: yes

    - name: Display Nginx configuration test result
      ansible.builtin.debug:
        msg: >-
          Nginx config test: {{
            'OK' if 'test is successful' in nginx_config_test.stderr
            else 'ERROR - Check stderr for details: ' + nginx_config_test.stderr
          }}

    - name: --- CLOUDPANEL CHECKS ---
      ansible.builtin.debug:
        msg: "Starting CloudPanel checks..."

    - name: Display CloudPanel service status
      ansible.builtin.debug:
        msg: >-
          CloudPanel service status: {{
            'running' if (ansible_facts.services['cloudpanel'] is defined and ansible_facts.services['cloudpanel'].state == 'running')
            else 'NOT RUNNING'
          }}
      failed_when: ansible_facts.services['cloudpanel'].state != 'running'
      ignore_errors: yes

    - name: --- LOG FILE ANALYSIS (LAST {{ log_check_lines }} LINES) ---
      ansible.builtin.debug:
        msg: "Scanning recent log files for errors/warnings..."

    - name: Check Nginx error log for recent errors/warnings
      ansible.builtin.shell: tail -n {{ log_check_lines }} /var/log/nginx/error.log | grep -iE "error|warn|crit|fail" || true
      register: nginx_log_errors
      changed_when: false
      ignore_errors: yes

    - name: Display Nginx error log findings
      ansible.builtin.debug:
        msg: >-
          Nginx Error Log Warnings/Errors (last {{ log_check_lines }} lines):\n{{
            nginx_log_errors.stdout if nginx_log_errors.stdout
            else 'No errors/warnings found or log not accessible.'
          }}
      when: nginx_log_errors.stdout is defined and nginx_log_errors.stdout

    - name: Check system syslog for recent errors/warnings
      ansible.builtin.shell: |
        if [ -f /var/log/syslog ]; then
          tail -n {{ log_check_lines }} /var/log/syslog | grep -iE "error|warn|crit|fail" || true
        elif [ -f /var/log/messages ]; then
          tail -n {{ log_check_lines }} /var/log/messages | grep -iE "error|warn|crit|fail" || true
        else
          echo "No syslog or messages file found."
        fi
      register: syslog_errors
      changed_when: false
      ignore_errors: yes

    - name: Display Syslog findings
      ansible.builtin.debug:
        msg: >-
          System Syslog Warnings/Errors (last {{ log_check_lines }} lines):\n{{
            syslog_errors.stdout if syslog_errors.stdout
            else 'No errors/warnings found or log not accessible.'
          }}
      when: syslog_errors.stdout is defined and syslog_errors.stdout

    - name: --- CHECK COMPLETE ---
      ansible.builtin.debug:
        msg: "Core server and CloudPanel health check completed. Review output above for any 'FAILED' or 'ERROR' messages."
